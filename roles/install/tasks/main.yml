---
- name: Detect disks, erase data and set variables
  block:
    - name: Initialize storage devices list
      set_fact:
        storage_devices: []

    - name: Get storage devices on which the system can be installed
      set_fact:
        storage_devices: "{{ storage_devices + [item.key] }}"
      with_dict: "{{ ansible_devices }}"
# TODO: currently supports QEMU, test it with virtualbox, vmware etc
      when: "item.value.host.startswith('SATA controller:') and item.value.vendor != 'QEMU' or
             item.value.host.startswith('SCSI storage controller:') or
             item.value.host.startswith('Non-Volatile memory controller:')"

# TODO: change this so that if more than one is available than the user is prompted to set this in variables
    - name: Select drive for the installtion or fail if more than one is available
      set_fact:
        install_drive: "{{ storage_devices[0] }}"
      failed_when: storage_devices | length != 1
 
    - name: Overwrite disk with random data
      command: shred -v --random-source=/dev/urandom -n1 /dev/{{ install_drive }}
      when: shred

    - name: Erase data structures from the partitions
      command: wipefs -a "/dev/{{ item }}"
      loop: "{{ ansible_devices[install_drive].partitions.keys() }}"

    - name: Erase data structures from the disk
      command: wipefs -a "/dev/{{ install_drive }}"

    - name: Get processor architecture
      set_fact:
        proc: "{{ item|regex_replace( '^.*(Intel|AMD)', '\\1' ) | lower }}"
      with_items: "{{ ansible_processor }}"
      when: "item.endswith('Intel') or
             item.endswith('AMD')"

- name: Partition the disk
  block:
    - name: Create EFI and LUKS partitions
      parted:
        device: "/dev/{{ install_drive }}"
        number: "{{ item.number }}"
        part_start: "{{ item.part_start }}"
        part_end: "{{ item.part_end }}"
        label: gpt
        state: present
      loop:
        - { number: 1, part_start: 0%, part_end: 551MiB }
        - { number: 2, part_start: 552MiB, part_end: 100% }

    - name: Update gathered facts
      setup:

    - name: Get drive partitions
      set_fact:
        partitions: "{{ ansible_devices[install_drive].partitions.keys() | sort }}"

- name: Setup LVM on LUKS
  block:
    - name: Setup LUKS container
      luks_device:
        device: "/dev/{{ partitions[1] }}"
        passphrase: "{{ luks_password }}"
        type: luks1
        pbkdf: 
          iteration_count: 420997
        name: cryptlvm
        state: opened

    - name: Setup physical volume and the volume group
      lvg:
        vg: vg
        pvs: /dev/mapper/cryptlvm
        force: yes

    - name: Setup logical volumes
      lvol:
        vg: "{{ item.vg }}"
        lv: "{{ item.lv }}"
        size: "{{ item.size }}"
        force: yes
      loop:
        - { vg: vg, lv: swap, size: "{{ ansible_memory_mb.real.total / 2 }}" }
        - { vg: vg, lv: root, size: "{{ root_size }}" }
        - { vg: vg, lv: var, size: "{{ var_size }}" }
        - { vg: vg, lv: varlog, size: "{{ varlog_size }}" }
        - { vg: vg, lv: vartmp, size: "{{ vartmp_size }}" }
        - { vg: vg, lv: home, size: 100%FREE }
                
- name: Format the partitions
  filesystem:
    dev: "{{ item.dev }}"
    fstype: "{{ item.fstype }}"
    opts: "{{ item.opts }}"
    force: yes
  loop:
    - {dev: "/dev/{{ partitions[0] }}", fstype: vfat, opts: -F32}
    - {dev: /dev/vg/swap, fstype: swap, opts: }
    - {dev: /dev/vg/root, fstype: ext4, opts: }
    - {dev: /dev/vg/var, fstype: ext4, opts: }
    - {dev: /dev/vg/varlog, fstype: ext4, opts: }
    - {dev: /dev/vg/vartmp, fstype: ext4, opts: }
    - {dev: /dev/vg/home, fstype: ext4, opts: }

- name: Mount the file systems
  block:
    - name: Update gathered facts
      setup:

    - name: Get uuids
      set_fact:
        uuids: "{{ ansible_device_links.uuids | replace('dm-', 'dm') }}"

    - name: Mount logical volumes
      mount:
        path: "{{ item.path }}"
        src: "UUID={{ item.uuid }}"
        fstype: "{{ item.fs }}"
        state: mounted
        passno: "{{ item.passno }}"
      loop:
        - {path: /mnt, uuid: "{{ uuids.dm2[0] }}", fs: ext4, passno: 1}
        - {path: /mnt/efi, uuid: "{{ uuids[partitions[0]][0] }}" , fs: vfat, passno: 2}
        - {path: /mnt/var, uuid: "{{ uuids.dm3[0] }}", fs: ext4, passno: 2}
        - {path: /mnt/var/log, uuid: "{{ uuids.dm4[0] }}", fs: ext4, passno: 2}
        - {path: /mnt/var/tmp, uuid: "{{ uuids.dm5[0] }}", fs: ext4, passno: 2}
        - {path: /mnt/home, uuid: "{{ uuids.dm6[0] }}", fs: ext4, passno: 2}

- name: Select mirrors
  block:
    - name: Download mirrorlist
      get_url:
        url: "https://archlinux.org/mirrorlist/?country={{ country }}&ip_version=4&use_mirror_status=on"
        dest: /etc/pacman.d/mirrorlist
        force: yes
    
    - name: Uncomment mirrors
      replace:
        path: /etc/pacman.d/mirrorlist
        regexp: \#Server
        replace: Server

- name: Install essential packages
  command: pacstrap /mnt base linux linux-firmware lvm2 efibootmgr grub openssh python sudo dash "{{ proc }}-ucode"

- name: Generate fstab
  block:
    - name: Generate fstab - run command
      command: genfstab -U /mnt
      register: fstab
    
    - name: Generate fstab - Save output to file
      copy:
        content: "{{ fstab.stdout }}"
        dest: /mnt/etc/fstab

- name: Generate LUKS decryption key
  block:
    - name: Create directory for LUKS keyfile
      file:
        path: /mnt/root/secrets/
        state: directory
        mode: 0700

    - name: Generate random LUKS keyfile
      command: dd bs=512 count=8 if=/dev/random of=/mnt/root/secrets/luks-crypt.bin iflag=fullblock

    - name: Change LUKS keyfile permissions
      file:
        path: /mnt/root/secrets/luks-crypt.bin
        mode: 0000

    - name: Add keyfile to the LUKS container
      luks_device:
        device: "/dev/{{ partitions[1] }}"
        passphrase: "{{ luks_password }}"
        new_keyfile: /mnt/root/secrets/luks-crypt.bin
        pbkdf: 
          iteration_count: 420997

- name: Generate initramfs
  block:
    - name: Add hooks and keyfile path to mkinitcpio.conf 
      lineinfile:
        dest: /mnt/etc/mkinitcpio.conf
        regexp: "{{ item.regex }}"
        line: "{{ item.line }}"
      loop:
        - {regex: ^HOOKS=, line: HOOKS=(base udev autodetect keyboard keymap modconf block encrypt lvm2 filesystems fsck)}
        - {regex: ^FILES=, line: FILES=(/root/secrets/luks-crypt.bin)}

    - name: Create new initramfs
      command: arch-chroot /mnt mkinitcpio -p linux

- name: Bootloader configuration
  block:
    - name: Set kernel parameters and configure grub
      lineinfile:
        dest: /mnt/etc/default/grub
        regexp: "{{ item.regex }}"
        line: "{{ item.line }}"
      loop:
        - {regex: GRUB_CMDLINE_LINUX=, line: "GRUB_CMDLINE_LINUX='cryptdevice=UUID={{ uuids[partitions[1]][0] }}:cryptlvm resume=UUID={{ uuids[partitions[1]][0] }} cryptkey=rootfs:/root/secrets/luks-crypt.bin'"}
        - {regex: GRUB_CMDLINE_LINUX_DEFAULT=, line: "GRUB_CMDLINE_LINUX_DEFAULT='loglevel=3 quiet net.ifnames=0'"}
        - {regex: GRUB_ENABLE_CRYPTODISK=, line: GRUB_ENABLE_CRYPTODISK=y}
        - {regex: GRUB_TIMEOUT=, line: GRUB_TIMEOUT=0}

    - name: Install bootloader
      command: arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB

    - name: Generate grub config
      command: arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

    - name: Change /boot permissions
      file:
        path: /mnt/boot
        state: directory
        mode: 0700

- name: Network configuration
  block:
    - name: Enable network services
      command: arch-chroot /mnt systemctl enable systemd-networkd systemd-resolved

    - name: Link /etc/resolv.conf for compatibility with older Linux applications
      file:
        src: /run/systemd/resolve/resolv.conf
        path: /mnt/etc/resolv.conf
        state: link
        force: yes

    - name: Change wait-online service to wait for any interface
      lineinfile:
        path: /mnt/usr/lib/systemd/system/systemd-networkd-wait-online.service
        regexp: "ExecStart="
        line: "ExecStart=/usr/lib/systemd/systemd-networkd-wait-online --any"

    - name: Configure wired adapter
      blockinfile: 
        path: /mnt/etc/systemd/network/20-wired.network
        create: true
        block: |
          [Match]
          Name=eth0

          [Network]
          DHCP=yes

          [DHCPv4]
          RouteMetric=10

    - name: Configure wireless adapter
      block:
        - name: Install wireless utility package
          command: arch-chroot /mnt pacman -S "{{ wireless_utility }}" --noconfirm

        - name: Configure wireless adapter
          blockinfile: 
            path: /mnt/etc/systemd/network/25-wireless.network
            create: true
            block: |
              [Match]
              Name=wlan0
              
              [Network]
              DHCP=yes
              
              [DHCPv4]
              RouteMetric=20
      when: wireless

- name: Create system user and setup root password
  block:
    - name: Set root password
      command: arch-chroot /mnt usermod -p "{{ root_password | password_hash('sha512') }}" root

    - name: Create system user
      command: arch-chroot /mnt useradd -m -G adm,games,sys,wheel,lp,audio,kvm,video "{{ user_username }}" -p "{{ user_password | password_hash('sha512') }}"
    
    - name: Give passwordless sudo access to the wheel group
      lineinfile:
        path: /mnt/etc/sudoers
        state: present
        regexp: "%wheel ALL="
        line: "%wheel ALL=(ALL) NOPASSWD: ALL"
        validate: "/usr/sbin/visudo --check --file=%s"

# TODO: Change to luks2 format when grub start fully supporting it
#
#    - name: debug
#      debug:
#        msg: '{{ partitions.stdout_lines[0] }}'
#
# TODO: check if possible to gather facts during execution (disk wise) and use it instead of registering UUIDs
# TODO: add prelim checks: verify the boot mode (EFI) and check internet connection
# TODO: add post execution (handlers?) tasks: add hook to reboot after done 
#
# TODO: add volumes for /var /tmp /var/log and others if needed (see current cis recommendations)
#       10GB for var, 5G for /var/log 1-2G for /var/tmp? (if separate it at all)
# TODO: change task based on shell / command module to use dedicated modules where possible
# TODO: fix the luks_device pbkdf2 iteration count for optimal security / speed

- name: Update the system clock
  command: timedatectl set-ntp true

- name: Partition the disks
  block:
    - name: Erase GPT structures from the disk
      command: sgdisk -Z '{{ drive }}'

    - name: Create EFI partition
      command: sgdisk -n 1:0:551M -c 1:BOOT -t 1:ef00 '{{ drive }}'

    - name: Create LUKS partition
      command: sgdisk -n 0:0:0 -c 0:LUKS -t 0:8309 '{{ drive }}'

    - name: Register paths of the new partitions
      shell: 'lsblk {{ drive }} -nlpo NAME | tail -n +2'
      register: partitions
    
- name: Setup LVM on LUKS
  block:
    - name: Setup LUKS container
      luks_device:
        device: '{{ partitions.stdout_lines[1] }}'
        passphrase: '{{ luks_password }}'
        type: luks1
        #pbkdf:
        #  iteration_count: 999999999
        name: cryptlvm
        state: opened

    - name: Setup physical volume and the volume group
      lvg:
        vg: vg
        pvs: /dev/mapper/cryptlvm

    - name: Setup logical volumes
      lvol:
        vg: '{{ item.vg }}'
        lv: '{{ item.lv }}'
        size: '{{ item.size }}'
      loop:
        - {vg: vg, lv: swap, size: 16G}
        - {vg: vg, lv: root, size: 30G}
        - {vg: vg, lv: home, size: 100%FREE}
                
- name: Format the partitions
  filesystem:
    dev: '{{ item.dev }}'
    fstype: '{{ item.fstype }}'
    opts: '{{ item.opts }}'
    force: yes
  loop:
    - {dev: '{{ partitions.stdout_lines[0] }}', fstype: vfat, opts: -F32}
    - {dev: /dev/mapper/vg-swap, fstype: swap, opts: }
    - {dev: /dev/mapper/vg-root, fstype: ext4, opts: }
    - {dev: /dev/mapper/vg-home, fstype: ext4, opts: }

- name: Mount the file systems
  block:
    - name: Register UUIDs of the partitions and volumes
      command: blkid -s UUID -o value '{{ item }}'
      loop:
        - /dev/nvme0n1p1
        - /dev/nvme0n1p2
        - /dev/vg/root
        - /dev/vg/home
        - /dev/vg/swap
      register: uuid

    - name: Enable swap volume
      command: swapon -U '{{ uuid.results[4].stdout }}'

    - name: Mount logical volumes
      mount:
        path: '{{ item.path }}'
        src: 'UUID={{ item.uuid }}'
        fstype: '{{ item.fs }}'
        state: mounted
        passno: '{{ item.passno }}'
      loop:
        - {path: /mnt, uuid: '{{ uuid.results[2].stdout }}', fs: ext4, passno: 1}
        - {path: /mnt/efi, uuid: '{{ uuid.results[0].stdout }}', fs: vfat, passno: 2}
        - {path: /mnt/home, uuid: '{{ uuid.results[3].stdout }}', fs: ext4, passno: 2}

# TODO: optimal mirror selection task
- name: Install essential packages
  command: pacstrap /mnt base linux linux-firmware lvm2 efibootmgr grub intel-ucode

- name: Generate the /etc/fstab file
  shell: genfstab -U /mnt > /mnt/etc/fstab

- name: Time zone
  block:
    - name: Set the timezone
      command: arch-chroot /mnt ln -sf /usr/share/zoneinfo/Europe/Warsaw /etc/localtime
    
    - name: Set the Hardware Clock from the System Clock
      command: arch-chroot /mnt hwclock --systohc

- name: Localization
  block:
    - name: Configure locale.gen
      lineinfile:
        dest: /mnt/etc/locale.gen
        regexp: '{{ item.regex }}'
        line: '{{ item.line }}'
      loop:
        - {regex: en_US\.UTF-8 UTF-8, line: en_US.UTF-8 UTF-8}
        - {regex: pl_PL\.UTF-8 UTF-8, line: pl_PL.UTF-8 UTF-8}
    
    - name: Generate locales
      command: arch-chroot /mnt locale-gen
    
    - name: Create locale.conf
      lineinfile:
        create: yes
        dest: /mnt/etc/locale.conf
        regexp: LANG=en_US\.UTF-8
        line: LANG=en_US.UTF-8
    
    - name: Create vconsole.conf
      lineinfile:
        create: yes
        dest: /mnt/etc/vconsole.conf
        line: '{{ item }}'
      loop:
        - KEYMAP=pl
        - FONT=Lat2-Terminus16
        - FONT_MAP=8859-2

    - name: Set hostname
      lineinfile:
        create: yes
        dest: /mnt/etc/hostname
        line: '{{ hostname }}'

- name: Generate LUKS decryption key
  block:
    - name: Create directory for LUKS keyfile
      file:
        path: /mnt/root/secrets/
        state: directory
        mode: 0700

    - name: Generate random LUKS keyfile
      shell: dd bs=512 count=8 if=/dev/random of=/mnt/root/secrets/luks-crypt.bin iflag=fullblock

    - name: Change LUKS keyfile permissions
      file:
        path: /mnt/root/secrets/luks-crypt.bin
        mode: 0600

    - name: Add keyfile to the LUKS container
      luks_device:
        device: '{{ partitions.stdout_lines[1] }}'
        passphrase: '{{ luks_password }}'
        new_keyfile: /mnt/root/secrets/luks-crypt.bin

- name: Generate initramfs
  block:
    - name: Add hooks and keyfile path to mkinitcpio.conf 
      lineinfile:
        dest: /mnt/etc/mkinitcpio.conf
        regexp: '{{ item.regex }}'
        line: '{{ item.line }}'
      loop:
        - {regex: ^HOOKS=, line: HOOKS=(base udev autodetect keyboard keymap modconf block encrypt lvm2 filesystems fsck)}
        - {regex: ^FILES=, line: FILES=(/root/secrets/luks-crypt.bin)}

    - name: Create new initramfs
      command: arch-chroot /mnt mkinitcpio -p linux

- name: Configure and install bootloader
  block:
    - name: Set kernel parameters
      lineinfile:
        dest: /mnt/etc/default/grub
        regexp: '{{ item.regex }}'
        line: '{{ item.line }}'
      loop:
        - {regex: GRUB_CMDLINE_LINUX=, line: 'GRUB_CMDLINE_LINUX="cryptdevice=UUID={{ uuid.results[1].stdout }}:cryptlvm resume=/dev/vg/swap cryptkey=rootfs:/root/secrets/luks-crypt.bin"'}
        - {regex: GRUB_ENABLE_CRYPTODISK=, line: GRUB_ENABLE_CRYPTODISK=y}

    - name: Configure grub
      command: arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB

    - name: Generate grub config
      command: arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

    - name: Change /boot permissions
      file:
        path: /mnt/boot
        state: directory
        mode: 0700

- name: Post configuration
  tags: post
  block:
    - name: Set root password
      command: arch-chroot /mnt usermod -p "{{ root_password | password_hash('sha512') }}" root

    - name: Install additional packages
      command: arch-chroot /mnt pacman -S openssh python sudo

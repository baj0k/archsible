# TODO: check if possible to select microcode package (intel-ucode / amd-ucode) based on gathered facts (intel / amd processor)
# TODO: Add optional disk shred task before partitioning
# TODO: when reviewing hardening possibilities consider adding a /tmp partition (1GB?) with nosuid etc options

- name: Partition the disks
  block:
    - name: Create EFI partition
      command: sgdisk -n 1:0:551M -c 1:BOOT -t 1:ef00 '/dev/{{ drive }}'

    - name: Create LUKS partition
      command: sgdisk -n 0:0:0 -c 0:LUKS -t 0:8309 '/dev/{{ drive }}'

    - name: Update gathered facts
      setup:

    - name: Initialize empty partition list
      set_fact:
        partitions: []

    - name: Get selected drive partitions
      set_fact:
        partitions: "{{ partitions + [item.key] }}"
      with_dict: "{{ ansible_devices[drive].partitions }}"

- name: Setup LVM on LUKS
  block:
    - name: Setup LUKS container
      luks_device:
        device: '/dev/{{ partitions[1] }}'
        passphrase: '{{ luks_password }}'
        type: luks1
        pbkdf: 
          iteration_count: 420997
        name: cryptlvm
        state: opened

    - name: Setup physical volume and the volume group
      lvg:
        vg: vg
        pvs: /dev/mapper/cryptlvm
        force: yes

    - name: Setup logical volumes
      lvol:
        vg: '{{ item.vg }}'
        lv: '{{ item.lv }}'
        size: '{{ item.size }}'
        force: yes
      loop:
        - {vg: vg, lv: swap, size: 16G}
        - {vg: vg, lv: root, size: 30G}
        - {vg: vg, lv: var, size: 10G}
        - {vg: vg, lv: varlog, size: 5G}
        - {vg: vg, lv: vartmp, size: 2G}
        - {vg: vg, lv: home, size: 100%FREE}
                
- name: Format the partitions
  filesystem:
    dev: '{{ item.dev }}'
    fstype: '{{ item.fstype }}'
    opts: '{{ item.opts }}'
    force: yes
  loop:
    - {dev: '/dev/{{ partitions[0] }}', fstype: vfat, opts: -F32}
    - {dev: /dev/mapper/vg-swap, fstype: swap, opts: }
    - {dev: /dev/mapper/vg-root, fstype: ext4, opts: }
    - {dev: /dev/mapper/vg-var, fstype: ext4, opts: }
    - {dev: /dev/mapper/vg-varlog, fstype: ext4, opts: }
    - {dev: /dev/mapper/vg-vartmp, fstype: ext4, opts: }
    - {dev: /dev/mapper/vg-home, fstype: ext4, opts: }

- name: Mount the file systems
  block:
    - name: Update gathered facts
      setup:

    - name: Initialize empty uuid list
      set_fact:
        vg_uuid: []
        part_uuid: []

    - name: Get vg_uuids
      set_fact:
        vg_uuid: "{{ vg_uuid + item.value }}"
      with_dict: "{{ ansible_device_links.uuids }}"
      when: item.key.startswith('dm')
  
    - name: Get part_uuids
      set_fact:
        part_uuid: "{{ part_uuid + item.value }}"
      with_dict: "{{ ansible_device_links.uuids }}"
      when: item.key.startswith(drive)
  
    - name: show uuids
      debug: var=vg_uuid

    - name: show uuids
      debug: var=part_uuid

    - name: Enable swap volume
      command: swapon -U '{{ vg_uuid[5] }}'

    - name: Mount logical volumes
      mount:
        path: '{{ item.path }}'
        src: 'UUID={{ item.uuid }}'
        fstype: '{{ item.fs }}'
        state: mounted
        passno: '{{ item.passno }}'
      loop:
        - {path: /mnt, uuid: '{{ vg_uuid[4] }}', fs: ext4, passno: 1}
        - {path: /mnt/efi, uuid: '{{ part_uuid[0] }}', fs: vfat, passno: 2}
        - {path: /mnt/home, uuid: '{{ vg_uuid[0] }}', fs: ext4, passno: 2}
        - {path: /mnt/var, uuid: '{{ vg_uuid[3] }}', fs: ext4, passno: 2}
        - {path: /mnt/var/log, uuid: '{{ vg_uuid[2] }}', fs: ext4, passno: 2}
        - {path: /mnt/var/tmp, uuid: '{{ vg_uuid[1] }}', fs: ext4, passno: 2}

- name: Select mirrors
  block:
    - name: Download mirrorlist
      get_url:
        url: 'https://archlinux.org/mirrorlist/?country={{ country }}&ip_version=4&use_mirror_status=on'
        dest: /etc/pacman.d/mirrorlist
        force: yes
    
    - name: Uncomment mirrors
      replace:
        path: /etc/pacman.d/mirrorlist
        regexp: \#Server
        replace: Server

- name: Install essential packages
  command: pacstrap /mnt base linux linux-firmware lvm2 efibootmgr grub '{{ proc }}'-ucode openssh python sudo

- name: Generate fstab
  block:
    - name: Generate fstab - run command
      command: genfstab -U /mnt
      register: fstab
    
    - name: Generate fstab - Save output to file
      copy:
        content: '{{ fstab.stdout }}'
        dest: /mnt/etc/fstab

- name: Generate LUKS decryption key
  block:
    - name: Create directory for LUKS keyfile
      file:
        path: /mnt/root/secrets/
        state: directory
        mode: 0700

    - name: Generate random LUKS keyfile
      command: dd bs=512 count=8 if=/dev/random of=/mnt/root/secrets/luks-crypt.bin iflag=fullblock

    - name: Change LUKS keyfile permissions
      file:
        path: /mnt/root/secrets/luks-crypt.bin
        mode: 0000

    - name: Add keyfile to the LUKS container
      luks_device:
        device: '/dev/{{ partitions[1] }}'
        passphrase: '{{ luks_password }}'
        new_keyfile: /mnt/root/secrets/luks-crypt.bin
        pbkdf: 
          iteration_count: 420997

- name: Generate initramfs
  block:
    - name: Add hooks and keyfile path to mkinitcpio.conf 
      lineinfile:
        dest: /mnt/etc/mkinitcpio.conf
        regexp: '{{ item.regex }}'
        line: '{{ item.line }}'
      loop:
        - {regex: ^HOOKS=, line: HOOKS=(base udev autodetect keyboard keymap modconf block encrypt lvm2 filesystems fsck)}
        - {regex: ^FILES=, line: FILES=(/root/secrets/luks-crypt.bin)}

    - name: Create new initramfs
      command: arch-chroot /mnt mkinitcpio -p linux

- name: Configure and install bootloader
  block:
    - name: Set kernel parameters
      lineinfile:
        dest: /mnt/etc/default/grub
        regexp: '{{ item.regex }}'
        line: '{{ item.line }}'
      loop:
        - {regex: GRUB_CMDLINE_LINUX=, line: 'GRUB_CMDLINE_LINUX="cryptdevice=UUID={{ part_uuid[1] }}:cryptlvm resume=UUID={{ part_uuid[1] }} cryptkey=rootfs:/root/secrets/luks-crypt.bin"'}
        - {regex: GRUB_CMDLINE_LINUX_DEFAULT=, line: 'GRUB_CMDLINE_LINUX_DEFAULT="loglevel=3 quiet net.ifnames=0"'}
        - {regex: GRUB_ENABLE_CRYPTODISK=, line: GRUB_ENABLE_CRYPTODISK=y}

    - name: Configure grub
      command: arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB

    - name: Generate grub config
      command: arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

    - name: Change /boot permissions
      file:
        path: /mnt/boot
        state: directory
        mode: 0700

- name: Network configuration
  block:
    - name: Enable network services
      command: arch-chroot /mnt systemctl enable systemd-networkd systemd-resolved sshd

    - name: Change wait-online service to wait for any interface
      lineinfile:
        path: /mnt/usr/lib/systemd/system/systemd-networkd-wait-online.service
        regexp: 'ExecStart='
        line: 'ExecStart=/usr/lib/systemd/systemd-networkd-wait-online --any'

    - name: Configure wired adapter
      blockinfile: 
        path: /mnt/etc/systemd/network/20-wired.network
        create: true
        block: |
          [Match]
          Name=eth0

          [Network]
          DHCP=yes

          [DHCPv4]
          RouteMetric=10
      when: wired_adapter

    - name: Configure wireless adapter
      blockinfile: 
        path: /mnt/etc/systemd/network/25-wireless.network
        create: true
        block: |
          [Match]
          Name=wlan0
          
          [Network]
          DHCP=yes
          
          [DHCPv4]
          RouteMetric=20
      when: wireless_adapter

    - name: Set root password
      command: arch-chroot /mnt usermod -p "{{ root_password | password_hash('sha512') }}" root

    - name: Allow root login via ssh
      lineinfile:
        dest: /mnt/etc/ssh/sshd_config
        regexp: '^#PermitRootLogin'
        line: 'PermitRootLogin yes'

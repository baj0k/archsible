# TODO: add acpi if needed and check if acpi is needed on desktop or laptop only?
# TODO: add symlinks for user.js chrome.css in firefox tasks
---
- name: Docker configuration
  block:
    - name: Docker - Install packages
      become: yes
      pacman:
        name: 
          - docker
          - docker-compose
        state: present

    - name: Docker - Add user to docker group
      become: yes
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
  when: docker

- name: Dunst configuration
  block:
    - name: Dunst - Install packages
      become: yes
      pacman:
        name: 
          - dunst
          - libnotify
        state: present
  when: dunst

- name: Firefox configuration
  block:
    - name: Firefox - Install packages
      become: yes
      pacman:
        name: 
          - firefox
        state: present

    - name: Firefox - Create profiles.ini
      blockinfile:
        create: yes
        path: "{{ ansible_env.HOME }}/.mozilla/firefox/profiles.ini"
        block: |
          [Install4F96D1932A9F858E]
          Default={{ user_username }}
          Locked=1

          [Profile0]
          Name={{ user_username }}
          IsRelative=0
          Path={{ user_username }}
          Default=1

          [General]
          StartWithLastProfile=1
          Version=2

    - name: Firefox - Create install.ini
      blockinfile:
        create: yes
        path: "{{ ansible_env.HOME }}/.mozilla/firefox/installs.ini"
        block: |
          [4F96D1932A9F858E]
          Default={{ user_username }}
          Locked=1

    - name: Firefox - Create default profile
      command: firefox -headless -no-remote -CreateProfile "{{ user_username }} {{ ansible_env.HOME }}/.mozilla/firefox/{{ user_username }}"

    - name: Firefox - Create extension directory
      become: yes
      file:
        path: "/usr/lib/firefox/browser/extensions"
        state: directory

    - name: Firefox - Download extensions
      become: yes
      get_url:
        url: "https://addons.mozilla.org/firefox/downloads/latest/{{ item.name }}/latest.xpi"
        dest: "/usr/lib/firefox/browser/extensions/{{ item.id }}.xpi"
      loop_control:
        index_var: loop_index
      loop:
        - { name: multi-account-containers, id: "@testpilot-containers" }
        - { name: i-dont-care-about-cookies, id: jid1-KKzOGWgsW3Ao4Q@jetpack }
        - { name: privacy-badger17, id: jid1-MnnxcxisBPnSXQ@jetpack }
        - { name: passff, id: passff@invicem.pro }
  when: firefox

- name: GUI setup
  block:
    - name: Display server configuration
      block:
        - name: Xorg - Install packages
          become: yes
          pacman:
            name: 
              - xorg
              - xorg-xinit
              - xwallpaper
              - xclip
              - xcompmgr
            state: present
              
        # TODO: fix for amd and nvidia drivers (current setup works for intel)
        - name: Xorg - Install GPU drivers
          become: yes
          pacman:
            name: 
              - mesa
              - lib32-mesa
              - xf86-video-intel
              - vulkan-intel
              - xf86-video-fbdev
              - intel-media-driver
            state: present

        - name: Xorg - Install fonts
          become: yes
          pacman:
            name: 
              - noto-fonts
              - ttf-joypixels
              - ttf-font-awesome
              - ttf-dejavu
              - ttf-inconsolata
              - ttf-liberation
              - adobe-source-han-sans-otc-fonts
            state: present

        - name: Xorg - Allow language specific characters in terminal
          become: yes
          blockinfile:
            create: yes
            path: /etc/X11/xorg.conf.d/00-keyboard.conf
            block: |
              Section "InputClass"
                      Identifier "system-keyboard"
                      MatchIsKeyboard "on"
                      Option "XkbLayout" "{{ country | lower }}"
              EndSection

        - name: Xorg - Initialize list variables
          set_fact:
            card_names: []
            consistent_names: []
            resolutions: []

        - name: Xorg - Get available video outputs
          command: find /sys/class/drm/ -name "card0-*" -printf "%f\n"
          register: cards

        - name: Xorg - Register highest resolution of available displays
          command: head -n 1 "/sys/class/drm/{{ item }}/modes"
          register: modes
          loop: "{{ cards.stdout_lines }}"

        - name: Xorg - Get connected displays
          set_fact:
            card_names: "{{ card_names + [item] }}"
          loop: "{{ modes.results }}"
          when: item.stdout != ""

        - name: Xorg - Get xrandr output names
          shell: "xrandr -display :0 | awk '$2 == \"connected\"{print $1}'"
          register: displays

        - name: Xorg - Fix inconsistent video output names
          set_fact:
            consistent_names: "{{ consistent_names + [item] }}"
          loop: "{{ displays.stdout_lines }}"
          loop_control:
            index_var: loop_index
          when: item != card_names[loop_index].item.replace('card0-', '')
          
        - name: Xorg - Get available displays names and resolutions
          set_fact:
            resolutions: "{{ resolutions + [{'card': consistent_names[loop_index] |
                                                     default(item.item.replace('card0-', '')),
                                             'mode': item.stdout_lines[0]}] }}"
          loop: "{{ card_names }}"
          loop_control:
            index_var: loop_index
          when: item.stdout != ""
        
        - name: Xorg - Configure monitor resolution
          become: yes
          blockinfile:
            create: yes
            path: "/etc/X11/xorg.conf.d/1{{ loop_index }}-{{ item.card }}.conf"
            block: |
              Section "Monitor"
                  Identifier  "{{ item.card }}"
                  Option      "PreferredMode" "{{ display_resolution | default(item.mode) }}"
                  Option      "Primary" "true"
              EndSection
          loop: "{{ resolutions }}"
          loop_control:
            index_var: loop_index
        
        - name: Xorg - Configure monitor layout
          become: yes
          lineinfile:
            path: "/etc/X11/xorg.conf.d/1{{ ansible_loop.index0 }}-{{ item.card }}.conf"
            regex: Option      "Primary" "true"
            line: '    Option      "LeftOf" "{{ ansible_loop.previtem.card }}"'
          loop: "{{ resolutions }}"
          loop_control:
            extended: yes
          when: resolutions | length > 1 and ansible_loop.index0 != 0

    - name: Window manager configuration
      block:
        - name: i3 - Install packages
          become: yes
          pacman:
            name:
              - i3-gaps
              - i3blocks
              - sxiv
            state: present
  when: i3

- name: Libvirt configuration
  block:
    - name: Libvirt - Remove iptables
      become: yes
      pacman:
        name: iptables
        state: absent
        extra_args: -dd

    - name: Libvirt - Install packages
      become: yes
      pacman:
        name: 
          - qemu
          - libvirt
          - iptables-nft
          - dnsmasq
          - dmidecode
          - virt-manager
          - edk2-ovmf
          - python-lxml
        state: present

    - name: Libvirt - Add user to libvirt group
      become: yes
      user:
        name: "{{ ansible_user }}"
        groups: libvirt
        append: yes

    - name: Libvirt - Change default virsh connection
      lineinfile:
        path: "{{ ansible_env.HOME }}/.config/libvirt/libvirt.conf"
        state: present
        create: yes
        line: 'uri_default = "qemu:///system"'

    - name: Libvirt - Enable daemon
      become: yes
      systemd:
        name: libvirtd
        state: started
        enabled: yes

    - name: Libvirt - Create pool directories
      file:
        path: "{{ ansible_env.HOME }}/.local/share/libvirt/{{ item }}"
        state: directory
      loop:
        - iso
        - vm

    - name: Libvirt - Delete default pool
      virt_pool:
        state: deleted
        name: default

    - name: Libvirt - Create new storage pools
      virt_pool:
        autostart: yes
        state: present
        name: "{{ item.name }}"
        xml: "
        <pool type='dir'>
          <name>{{ item.name }}</name>
          <target>
            <path>{{ ansible_env.HOME }}/.local/share/libvirt/{{ item.path }}</path>
          </target>
        </pool>"
      loop:
        - { name: default, path: vm }
        - { name: iso, path: iso }
  when: libvirt

- name: Mpd configuration
  block:
    - name: Mpd - Install packages
      become: yes
      pacman:
        name: 
          - mpd
        state: present
  when: mpd

- name: Mpv configuration
  block:
    - name: Mpv - Install packages
      become: yes
      pacman:
        name: 
          - mpv
          - yt-dlp
        state: present
  when: mpv

- name: Ncmpcpp configuration
  block:
    - name: Ncmpcpp - Install packages
      become: yes
      pacman:
        name: 
          - ncmpcpp
        state: present
  when: ncmpcpp

- name: Neofetch configuration
  block:
    - name: Neofetch - Install packages
      become: yes
      pacman:
        name: 
          - neofetch
        state: present
  when: neofetch

# TODO: get rid of the tags file somehow
- name: Newsboat configuration
  block:
    - name: Newsboat - Install packages
      become: yes
      pacman:
        name: 
          - newsboat
        state: present

# TODO: move to systemd timers
    - name: Newsboat - Add crontab tasks
      lineinfile:
        path: "{{ ansible_env.HOME }}/.config/crontab" 
        line: "*/10 * * * * /usr/bin/newsboat -x reload"
        create: true
  when: newsboat

- name: Neovim configuration
  block:
    - name: Neovim - Install packages
      become: yes
      pacman:
        name: 
          - neovim
          - shellcheck
        state: present
  when: neovim

- name: Ranger configuration
  block:
    # TODO: update configuration files, use: ranger --copy-config all
    - name: Ranger - Install packages
      become: yes
      pacman:
        name: 
          - ranger
          - ueberzug
        state: present
  when: ranger

- name: Suckless tools configuration
  block:
    - name: Suckless-builds - Clone repository
      git:
        repo: https://github.com/baj0k/suckless-builds.git
        dest: "{{ ansible_env.HOME }}/repos/suckless-builds"

    - name: Suckless-builds - Install dmenu
      become: yes
      make:
        chdir: "{{ ansible_env.HOME }}/repos/suckless-builds/dmenu"
        target: cleaninstall

    - name: Suckless-builds - Install sent
      become: yes
      make:
        chdir: "{{ ansible_env.HOME }}/repos/suckless-builds/sent"
        target: cleaninstall

    - name: Suckless-builds - Install slock
      become: yes
      make:
        chdir: "{{ ansible_env.HOME }}/repos/suckless-builds/slock"
        target: cleaninstall

    - name: Suckless-builds - Install st
      become: yes
      make:
        chdir: "{{ ansible_env.HOME }}/repos/suckless-builds/st"
        target: cleaninstall

    - name: Suckless-builds - Install tabbed
      become: yes
      make:
        chdir: "{{ ansible_env.HOME }}/repos/suckless-builds/tabbed"
        target: cleaninstall

    - name: Suckless-builds - Remove libxft
      become: yes
      pacman:
        name: libxft
        state: absent
        extra_args: -dd

    - name: Suckless-builds - Download libxft-bgra
      git:
        repo: "https://aur.archlinux.org/libxft-bgra.git"
        dest: "/tmp/libxft-bgra"

    - name: Suckless-builds - Install libxft-bgra
      command:
        cmd: makepkg -sric --noconfirm
        chdir: "/tmp/libxft-bgra"
      
    - name: Scron - Clone repository
      git:
        repo: https://aur.archlinux.org/scron-git.git
        dest: /tmp/scron

    - name: Scron - Build package
      command:
        cmd: makepkg -sric --noconfirm
        chdir: /tmp/scron
  when: suckless

- name: Tmux configuration
  block:
    - name: Tmux - Install packages
      become: yes
      pacman:
        name: 
          - tmux
        state: present
  when: tmux

- name: Zathura configuration
  block:
    - name: Zathura - Install packages
      become: yes
      pacman:
        name: 
          - pdfgrep
          - zathura
          - zathura-pdf-mupdf
        state: present
  when: zathura

- name: Zsh configuration
  block:
    - name: Zsh - Install packages
      become: yes
      pacman:
        name:
          - bat
          - checkbashisms
          - zsh
          - zsh-completions
          - zsh-syntax-highlighting
        state: present

    - name: Zsh - Change default shell
      become: yes
      user:
        name: "{{ ansible_user_id }}"
        shell: /bin/zsh

    - name: Zsh - Workaround for XDG compliance
      become: yes
      lineinfile:
        path: /etc/zsh/zshenv
        state: present
        create: yes
        line: 'export ZDOTDIR="$HOME/.config/zsh"'

    - name: Zsh - Create files for XDG workarounds
      file:
        path: "{{ ansible_env.HOME }}/{{ item.path }}"
        state: "{{ item.state }}"
      loop:
        - { state: directory, path: .config/wget }
        - { state: touch, path: .config/wget/wgetrc }
        - { state: directory, path: .local/share/zsh }
  when: zsh

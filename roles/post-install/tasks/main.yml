# TODO: add symlinks for user.js chrome.css in firefox tasks
# TODO: get rid of the tags file somehow (newsboat)
# TODO: update configuration files, use: ranger --copy-config all
---
- name: Gather facts
  setup:

- name: Localization settings
  become: yes
  block:
    - name: Enable NTP service
      command: timedatectl set-ntp true

    - name: Set timezone
      timezone:
        name: "{{ region }}/{{ city }}"
        hwclock: UTC

    - name: Remove unnecessary lines from locale.gen file
      lineinfile:
        path: /etc/locale.gen
        regexp: "#\\s+"
        state: absent

    - name: Generate locales
      locale_gen:
        name: "{{ item }}"
      loop:
        - en_US.UTF-8
        - "{{ country|lower + '_' + country + '.UTF-8' }}"

    - name: Create locale.conf
      lineinfile:
        create: yes
        path: /etc/locale.conf
        regexp: LANG=en_US\.UTF-8
        line: LANG=en_US.UTF-8
    
    - name: Create vconsole.conf
      template: 
        src: vconsole.conf.j2
        dest: /etc/vconsole.conf

    - name: Set a hostname
      hostname:
        name: "{{ hostname }}"

- name: Package management
  become: yes
  block:
    - name: Enabel multilib repository and configure pacman
      lineinfile:
        dest: /etc/pacman.conf
        regexp: "{{ item.regex }}"
        line: "{{ item.line }}"
        insertafter: "{{ item.insertafter }}"
      loop:
        - {regex: Architecture, line: Architecture = x86_64, insertafter: }
        - {regex: XferCommand =, line: "XferCommand = /usr/local/bin/pacman-aria2 %u %o", insertafter: }
        - {regex: Color, line: Color, insertafter: }
        - {regex: ILoveCandy, line: ILoveCandy, insertafter: Color}
        - {regex: ParallelDownloads, line: ParallelDownloads = 5, insertafter: }
        - {regex: NoExtract, line: NoExtract = mirrorlist.pacnew, insertafter: }
        - {regex: '^#\[multilib\]$', line: "[multilib]", insertafter: }
        - {regex: Include =, line: Include = /etc/pacman.d/mirrorlist, insertafter: "[multilib]" }

    - name: Create pacman hooks directory
      file:
        path: /etc/pacman.d/hooks
        state: directory

    - name: Create pacman-aria2 script
      template: 
        src: pacman-aria2.j2
        dest: /usr/local/bin/pacman-aria2
        mode: +x
    
    - name: Create pacman-aria2 config file
      template: 
        src: pacman-aria2.conf.j2
        dest: /etc/pacman.d/pacman-aria2.conf

    - name: Configure makepkg
      lineinfile:
        path: /etc/makepkg.conf
        regexp: "{{ item.regex }}"
        line: "{{ item.line }}"
      loop:
        - {regex: "'ftp::", line: "          'ftp::/usr/bin/aria2c -UWget -s4 %u -o %o'" }
        - {regex: "'http::", line: "          'http::/usr/bin/aria2c -UWget -s4 %u -o %o'" }
        - {regex: "'https::", line: "          'https::/usr/bin/aria2c -UWget -s4 %u -o %o'" }

    - name: Update system
      pacman:
        update_cache: yes
        upgrade: yes
    
    - name: Include conditional software packages
      set_fact:
        conditional_packages: "{{ conditional_packages | default([]) + item.packages }}"
      loop:
        - { packages: [pipewire,lib32-pipewire,wireplumber,pipewire-alsa,pipewire-pulse,pipewire-jack,lib32-pipewire-jack],condition: "{{ audio }}" }
        - { packages: [bluez,bluez-utils,blueman,bluez-hid2hci], condition: "{{ bluetooth }}" }
        - { packages: [dunst,libnotify], condition: "{{ dunst }}" }
        - { packages: [docker,docker-compose], condition: "{{ docker }}" }
        - { packages: [firefox], condition: "{{ firefox }}" }
        - { packages: [xorg,xorg-xinit,xwallpaper,xclip,xcompmgr], condition: "{{ i3 }}" }
        - { packages: [i3-gaps,i3blocks,sxiv], condition: "{{ i3 }}" }
        - { packages: [noto-fonts,ttf-joypixels,ttf-font-awesome,ttf-dejavu,ttf-inconsolata,ttf-liberation,adobe-source-han-sans-otc-fonts],condition: "{{ i3 }}" }
        - { packages: [qemu,libvirt,dnsmasq,dmidecode,virt-manager,edk2-ovmf,python-lxml], condition: "{{ libvirt }}" }
        - { packages: [mpd], condition: "{{ mpd }}" }
        - { packages: [mpv,yt-dlp], condition: "{{ mpv }}" }
        - { packages: [ncmpcpp], condition: "{{ ncmpcpp }}" }
        - { packages: [neofetch], condition: "{{ neofetch }}" }
        - { packages: [newsboat], condition: "{{ newsboat }}" }
        - { packages: [neovim,shellcheck], condition: "{{ neovim }}" }
        - { packages: [ranger,ueberzug], condition: "{{ ranger }}" }
        - { packages: [tmux], condition: "{{ tmux }}" }
        - { packages: [pdfgrep,zathura,zathura-pdf-mupdf], condition: "{{ zathura }}" }
        - { packages: [bat,checkbashisms,zsh,zsh-completions,zsh-syntax-highlighting], condition: "{{ zsh }}" }
      when: item.condition

    - name: Install packages
      pacman:
        name: "{{ item }}"
        state: present
      loop: 
        - [base-devel,dash,git,man-db,man-pages,p7zip,wget,rsync,reflector,python-pip,pkgfile,pacman-contrib]
        - "{{ machine_specific_software }}"
        - "{{ conditional_packages }}"

    - name: Synchronize pkgfile database
      systemd:
        name: pkgfile-update
        state: started

    - name: Configure reflector
      lineinfile:
        path: /etc/xdg/reflector/reflector.conf
        regexp: "{{ item.regex }}"
        line: "{{ item.line }}"
      loop:
        - {regex: "^#*\\s*--country", line: "{{ '--country ' + country|lower + ',' }}" }
        - {regex: "^#*\\s*--protocol", line: "--protocol https" }
        - {regex: "^#*\\s*--sort", line: "--sort rate" }

- name: Configure Dash
  become: yes
  block:
    - name: Relink /bin/sh to dash
      file:
        src: "dash"
        path: "/usr/bin/sh"
        state: link
        force: yes

    - name: Create pacman hook for persistant relinking of /bin/sh to dash
      template: 
        src: dash.hook.j2
        dest: /etc/pacman.d/hooks/dash.hook

          #    - name: Create pacman hook for persistant relinking of /bin/sh to dash
          #      blockinfile: 
          #        path: /etc/pacman.d/hooks/dash.hook
          #        create: true
          #        block: |
          #          [Trigger]
          #          Type = Package
          #          Operation = Install
          #          Operation = Upgrade
          #          Target = bash
          #
          #          [Action]
          #          Description = Re-pointing /bin/sh symlink to dash...
          #          When = PostTransaction
          #          Exec = /usr/bin/ln -sfT dash /usr/bin/sh
          #          Depends = dash

- name: Systemd configuration
  become: yes
  block:
    - name: Create Xfer pacman-aria2dl script
      template: 
        src: pacman-aria2dl.j2
        dest: /usr/local/bin/pacman-aria2dl

          #    - name: Create Xfer pacman-aria2dl script
          #      blockinfile: 
          #        path: /usr/local/bin/pacman-aria2dl
          #        create: true
          #        block: |
          #          #!/bin/sh
          #          TMPFILE=$(mktemp)
          #          trap '/usr/bin/rm -f "$TMPFILE"' EXIT
          #          
          #          packages=$(/usr/bin/checkupdates | /usr/bin/cut -d' ' -f1); [ -z "${packages}" ] && exit 0
          #          queue=$(/usr/bin/pacman -Sp ${packages} | /usr/bin/grep -v "file:///"); [ -z "${queue}" ] && exit 0
          #          
          #          printf '%s\n' "${queue}" > "${TMPFILE}"
          #          /usr/bin/aria2c --input-file="${TMPFILE}" --no-conf --dir=/var/cache/pacman/pkg --max-concurrent-downloads=10 --continue=true --quiet=true --allow-overwrite=true

    - name: Create pacman-aria2dl systemd service
      template: 
        src: pacman-aria2dl.service.j2
        dest: /etc/systemd/system/pacman-aria2dl.service

          #    - name: Create pacman-aria2dl systemd service
          #      blockinfile: 
          #        path: /etc/systemd/system/pacman-aria2dl.service
          #        create: true
          #        block: |
          #          [Unit]
          #          Description=Downloads tarballs of updated versions of packages
          #          Wants=pacman-aria2dl.timer
          #
          #          [Service]
          #          Type=oneshot
          #          ExecStart=/usr/local/bin/pacman-aria2dl
          #
          #          [Install]
          #          WantedBy=multi-user.target

    - name: Create pacman-aria2dl systemd timer
      template: 
        src: pacman-aria2dl.timer.j2
        dest: /etc/systemd/system/pacman-aria2dl.timer

          #    - name: Create pacman-aria2dl systemd timer
          #      blockinfile: 
          #        path: /etc/systemd/system/pacman-aria2dl.timer
          #        create: true
          #        block: |
          #          [Unit]
          #          Description=Downloads tarballs of updated versions of packages
          #          Requires=pacman-aria2dl.service
          #
          #          [Timer]
          #          Unit=pacman-aria2dl.service
          #          OnCalendar=*:0/30
          #          OnBootSec=30
          #
          #          [Install]
          #          WantedBy=timers.target
        
    - name: Enable service timer units
      systemd:
        daemon_reload: yes
        name: "{{ item }}"
        enabled: yes
      loop:
        - reflector.timer
        - pkgfile-update.timer
        - pacman-aria2dl.timer

- name: Bluetooth configuration
  become: yes
  block:
    - name: Enable btusb module
      modprobe:
        name: btusb
        state: present
    
    - name: Enable bluetooth daemon
      systemd:
        name: bluetooth
        state: started
        enabled: yes

    - name: Auto power-on bluetooth on boot
      lineinfile:
        path: /etc/locale.conf
        regexp: AutoEnable=
        line: AutoEnable=true
  when: audio or bluetooth

- name: AUR configuration
  block:
    - name: Clone AUR helper PKGBUILD
      git:
        repo: "https://aur.archlinux.org/{{ aur_helper }}.git"
        dest: "/tmp/{{ aur_helper }}"

    - name: Build AUR helper package
      command:
        cmd: makepkg -sric --noconfirm
        chdir: "/tmp/{{ aur_helper }}"
  when: aur

- name: User workspace setup
  block:
    - name: Create workspace directories
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ ansible_env.HOME }}/.cache"
        - "{{ ansible_env.HOME }}/.config"
        - "{{ ansible_env.HOME }}/.local"
        - "{{ ansible_env.HOME }}/ctf"
        - "{{ ansible_env.HOME }}/downloads"
        - "{{ ansible_env.HOME }}/fieldwork"
        - "{{ ansible_env.HOME }}/music"
        - "{{ ansible_env.HOME }}/pictures"
        - "{{ ansible_env.HOME }}/repos"
        - "{{ ansible_env.HOME }}/videos"

    - name: Clone dotfiles repository
      git:
        repo: https://github.com/baj0k/dotfiles.git
        dest: /tmp/dotfiles
        separate_git_dir: "{{ ansible_env.HOME }}/.local/dotfiles"
      ignore_errors: yes

    - name: Deploy dotfiles
      command: /bin/sh /tmp/dotfiles/setup.sh
      ignore_errors: yes

    - name: Docker configuration
      block:
        - name: Docker - Add user to docker group
          become: yes
          user:
            name: "{{ ansible_user }}"
            groups: docker
            append: yes
      when: docker

    - name: Firefox configuration
      block:
        - name: Create firefox directory
          file:
            path: "{{ ansible_env.HOME }}/.mozilla/firefox/"
            state: directory

        - name: Firefox - Create profiles.ini
          template: 
            src: firefox/profiles.ini.j2
            dest: "{{ ansible_env.HOME }}/.mozilla/firefox/profiles.ini"

              #        - name: Firefox - Create profiles.ini
              #          blockinfile:
              #            create: yes
              #            path: "{{ ansible_env.HOME }}/.mozilla/firefox/profiles.ini"
              #            block: |
              #              [Install4F96D1932A9F858E]
              #              Default={{ user_username }}
              #              Locked=1
              #    
              #              [Profile0]
              #              Name={{ user_username }}
              #              IsRelative=0
              #              Path={{ user_username }}
              #              Default=1
              #    
              #              [General]
              #              StartWithLastProfile=1
              #              Version=2
    
        - name: Firefox - Create installs.ini
          template: 
            src: firefox/installs.ini.j2
            dest: "{{ ansible_env.HOME }}/.mozilla/firefox/installs.ini"

              #        - name: Firefox - Create install.ini
              #          blockinfile:
              #            create: yes
              #            path: "{{ ansible_env.HOME }}/.mozilla/firefox/installs.ini"
              #            block: |
              #              [4F96D1932A9F858E]
              #              Default={{ user_username }}
              #              Locked=1
    
        - name: Firefox - Create default profile
          command: firefox -headless -no-remote -CreateProfile "{{ user_username }} {{ ansible_env.HOME }}/.mozilla/firefox/{{ user_username }}"
    
        - name: Firefox - Create extension directory
          become: yes
          file:
            path: "/usr/lib/firefox/browser/extensions"
            state: directory
    
        - name: Firefox - Download extensions
          become: yes
          get_url:
            url: "https://addons.mozilla.org/firefox/downloads/latest/{{ item.name }}/latest.xpi"
            dest: "/usr/lib/firefox/browser/extensions/{{ item.id }}.xpi"
          loop_control:
            index_var: loop_index
          loop:
            - { name: multi-account-containers, id: "@testpilot-containers" }
            - { name: i-dont-care-about-cookies, id: jid1-KKzOGWgsW3Ao4Q@jetpack }
            - { name: privacy-badger17, id: jid1-MnnxcxisBPnSXQ@jetpack }
            - { name: passff, id: passff@invicem.pro }
      when: firefox
    
    - name: GUI setup
      block:
        - name: Display server configuration
          block:
            # TODO: fix for amd and nvidia drivers (current setup works for intel)
            - name: Xorg - Install GPU drivers
              become: yes
              pacman:
                name: 
                  - mesa
                  - lib32-mesa
                  - xf86-video-intel
                  - vulkan-intel
                  - xf86-video-fbdev
                  - intel-media-driver
                state: present
    
            - name: Xorg - Allow language specific characters in terminal
              become: yes
              template: 
                src: xorg/00-keyboard.conf.j2
                dest: /etc/X11/xorg.conf.d/00-keyboard.conf

                  #            - name: Xorg - Allow language specific characters in terminal
                  #              become: yes
                  #              blockinfile:
                  #                create: yes
                  #                path: /etc/X11/xorg.conf.d/00-keyboard.conf
                  #                block: |
                  #                  Section "InputClass"
                  #                          Identifier "system-keyboard"
                  #                          MatchIsKeyboard "on"
                  #                          Option "XkbLayout" "{{ country | lower }}"
                  #                  EndSection
    
            - name: Xorg - Get available video outputs
              command: find /sys/class/drm/ -name "card0-*" -printf "%f\n"
              register: cards
    
            - name: Xorg - Register highest resolution of available displays
              command: head -n 1 "/sys/class/drm/{{ item }}/modes"
              register: modes
              loop: "{{ cards.stdout_lines }}"
    
            - name: Xorg - Get connected displays
              set_fact:
                card_names: "{{ card_names | default([]) + [item] }}"
              loop: "{{ modes.results }}"
              when: item.stdout != ""
    
            - name: Xorg - Get xrandr output names
              shell: "xrandr -display :0 | awk '$2 == \"connected\"{print $1}'"
              register: displays
    
            - name: Xorg - Fix inconsistent video output names
              set_fact:
                consistent_names: "{{ consistent_names | default([]) + [item] }}"
              loop: "{{ displays.stdout_lines }}"
              loop_control:
                index_var: loop_index
              when: item != card_names[loop_index].item.replace('card0-', '')
              
            - name: Xorg - Get available displays names and resolutions
              set_fact:
                resolutions: "{{ resolutions | default([]) + [{'card': consistent_names[loop_index] |
                                                                default(item.item.replace('card0-', '')),
                                                               'mode': item.stdout_lines[0]}] }}"
              loop: "{{ card_names }}"
              loop_control:
                index_var: loop_index
              when: item.stdout != ""
            
            - name: Xorg - Configure monitor resolution
              become: yes
              template: 
                src: xorg/1x-monitor.conf.j2
                dest: "/etc/X11/xorg.conf.d/1{{ loop_index }}-{{ item.card }}.conf"
              loop: "{{ resolutions }}"
              loop_control:
                index_var: loop_index

                  #      - name: Xorg - Configure monitor resolution
                  #        become: yes
                  #        blockinfile:
                  #          create: yes
                  #          path: "/etc/X11/xorg.conf.d/1{{ loop_index }}-{{ item.card }}.conf"
                  #          block: |
                  #            Section "Monitor"
                  #                Identifier  "{{ item.card }}"
                  #                Option      "PreferredMode" "{{ display_resolution | default(item.mode) }}"
                  #                Option      "Primary" "true"
                  #            EndSection
                  #        loop: "{{ resolutions }}"
                  #        loop_control:
                  #          index_var: loop_index
            
            - name: Xorg - Configure monitor layout
              become: yes
              lineinfile:
                path: "/etc/X11/xorg.conf.d/1{{ ansible_loop.index0 }}-{{ item.card }}.conf"
                regex: Option      "Primary" "true"
                line: '    Option      "LeftOf" "{{ ansible_loop.previtem.card }}"'
              loop: "{{ resolutions }}"
              loop_control:
                extended: yes
              when: resolutions | length > 1 and ansible_loop.index0 != 0
      when: i3
    
    - name: Libvirt configuration
      block:
        - name: Libvirt - Remove iptables
          become: yes
          pacman:
            name: iptables
            state: absent
            extra_args: -dd
    
        - name: Libvirt - Install packages
          become: yes
          pacman:
            name: 
              - iptables-nft
            state: present
    
        - name: Libvirt - Add user to libvirt group
          become: yes
          user:
            name: "{{ ansible_user }}"
            groups: libvirt
            append: yes
    
        - name: Libvirt - Change default virsh connection
          lineinfile:
            path: "{{ ansible_env.HOME }}/.config/libvirt/libvirt.conf"
            state: present
            create: yes
            line: 'uri_default = "qemu:///system"'
    
        - name: Libvirt - Enable daemon
          become: yes
          systemd:
            name: libvirtd
            state: started
            enabled: yes
    
        - name: Libvirt - Create pool directories
          file:
            path: "{{ ansible_env.HOME }}/.local/share/libvirt/{{ item }}"
            state: directory
          loop:
            - iso
            - vm
    
        - name: Libvirt - Delete default pool
          virt_pool:
            state: deleted
            name: default
    
        - name: Libvirt - Create new storage pools
          virt_pool:
            autostart: yes
            state: present
            name: "{{ item.name }}"
            xml: "
            <pool type='dir'>
              <name>{{ item.name }}</name>
              <target>
                <path>{{ ansible_env.HOME }}/.local/share/libvirt/{{ item.path }}</path>
              </target>
            </pool>"
          loop:
            - { name: default, path: vm }
            - { name: iso, path: iso }
      when: libvirt
    
    - name: Newsboat configuration
      block:
    # TODO: move to systemd timers
        - name: Newsboat - Add crontab tasks
          lineinfile:
            path: "{{ ansible_env.HOME }}/.config/crontab" 
            line: "*/10 * * * * /usr/bin/newsboat -x reload"
            create: true
      when: newsboat
    
    - name: Suckless tools configuration
      block:
        - name: Suckless-builds - Clone repository
          git:
            repo: https://github.com/baj0k/suckless-builds.git
            dest: "{{ ansible_env.HOME }}/repos/suckless-builds"
    
        - name: Suckless-builds - Install software
          become: yes
          make:
            chdir: "{{ ansible_env.HOME }}/repos/suckless-builds/{{ item }}"
            target: cleaninstall
          loop:
            - dmenu
            - sent
            - slock
            - st
            - tabbed
    
        - name: Suckless-builds - Remove libxft
          become: yes
          pacman:
            name: libxft
            state: absent
            extra_args: -dd
    
        - name: Suckless-builds - Download libxft-bgra
          git:
            repo: "https://aur.archlinux.org/libxft-bgra.git"
            dest: "/tmp/libxft-bgra"
    
        - name: Suckless-builds - Install libxft-bgra
          command:
            cmd: makepkg -sric --noconfirm
            chdir: "/tmp/libxft-bgra"
      when: suckless
    
    - name: Zsh configuration
      block:
        - name: Zsh - Change default shell
          become: yes
          user:
            name: "{{ ansible_user_id }}"
            shell: /bin/zsh
    
        - name: Zsh - Workaround for XDG compliance
          become: yes
          lineinfile:
            path: /etc/zsh/zshenv
            state: present
            create: yes
            line: 'export ZDOTDIR="$HOME/.config/zsh"'
    
        - name: Zsh - Remove leftover bash configuration files
          file:
            path: "{{ ansible_env.HOME }}/{{ item }}"
            state: absent
          loop:
            - .bash_history
            - .bash_logout
            - .bash_profile
            - .bashrc
    
        - name: Zsh - Create files for XDG workarounds
          file:
            path: "{{ ansible_env.HOME }}/{{ item.path }}"
            state: "{{ item.state }}"
          loop:
            - { state: directory, path: .config/wget }
            - { state: touch, path: .config/wget/wgetrc }
            - { state: directory, path: .local/share/zsh }
      when: zsh

- name: Migrate data from ansible controller
  copy:
    src: "{{ item }}"
    dest: "{{ item }}"
  loop:
    # $HOME
    - ~/ctf/
    - ~/downloads/
    - ~/fieldwork/
    - ~/music/
    - ~/pictures/
    - ~/repos/
    - ~/tmp/
    - ~/videos/
    # $HOME/.config
    - ~/.config/git/identity
  when: migrate

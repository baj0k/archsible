---
- name: Localization settings
  become: yes
  block:
    - name: Enable NTP service
      command: timedatectl set-ntp true

    - name: Set timezone
      timezone:
        name: "{{ region }}/{{ city }}"
        hwclock: UTC

    - name: Remove unnecessary lines from locale.gen file
      lineinfile:
        path: /etc/locale.gen
        regexp: "#\\s+"
        state: absent

    - name: Generate locales
      locale_gen:
        name: "{{ item }}"
      loop:
        - en_US.UTF-8
        - "{{ country|lower + '_' + country + '.UTF-8' }}"

    - name: Create locale.conf
      lineinfile:
        create: yes
        path: /etc/locale.conf
        regexp: LANG=en_US\.UTF-8
        line: LANG=en_US.UTF-8
    
    - name: Create vconsole.conf
      blockinfile:
        create: yes
        path: /etc/vconsole.conf
        block: |
          KEYMAP={{ country|lower }}
          FONT=Lat2-Terminus16
          FONT_MAP=8859-2

    - name: Set a hostname
      hostname:
        name: "{{ hostname }}"

- name: Package management
  become: yes
  block:
    - name: Enabel multilib repository and configure pacman
      lineinfile:
        dest: /etc/pacman.conf
        regexp: "{{ item.regex }}"
        line: "{{ item.line }}"
        insertafter: "{{ item.insertafter }}"
      loop:
        - {regex: Architecture, line: Architecture = x86_64, insertafter: }
        - {regex: XferCommand =, line: "XferCommand = /usr/local/bin/pacman-aria2 %u %o", insertafter: }
        - {regex: Color, line: Color, insertafter: }
        - {regex: ILoveCandy, line: ILoveCandy, insertafter: Color}
        - {regex: ParallelDownloads, line: ParallelDownloads = 5, insertafter: }
        - {regex: NoExtract, line: NoExtract = mirrorlist.pacnew, insertafter: }
        - {regex: '^#\[multilib\]$', line: "[multilib]", insertafter: }
        - {regex: Include =, line: Include = /etc/pacman.d/mirrorlist, insertafter: "[multilib]" }

    - name: Create pacman-aria2 script
      blockinfile: 
        path: /usr/local/bin/pacman-aria2
        create: true
        mode: +x
        block: |
          #!/bin/sh
          f=$(printf '%s' "$1" | awk -F/ '{print $NF}')
          echo Downloading "${f}" && /usr/bin/aria2c --conf-path=/etc/pacman.d/pacman-aria2.conf -d / -o "${2}" "${1}"

    - name: Create pacman-aria2 config file
      blockinfile: 
        path: /etc/pacman.d/pacman-aria2.conf
        create: true
        block: |
          # error handling
          timeout=5
          connect-timeout=30
          max-tries=3
          retry-wait=10
          max-file-not-found=1
          # downloading
          split=5
          max-connection-per-server=5
          min-split-size=1M
          max-concurrent-downloads=1
          file-allocation=none
          remote-time=true
          conditional-get=true
          no-netrc=true
          # resuming
          continue=true
          allow-overwrite=true
          always-resume=false
          # console
          quiet=true
          console-log-level=warn
          summary-interval=0
          # logging
          log-level=error

    - name: Configure makepkg
      lineinfile:
        path: /etc/makepkg.conf
        regexp: "{{ item.regex }}"
        line: "{{ item.line }}"
      loop:
        - {regex: "'ftp::", line: "          'ftp::/usr/bin/aria2c -UWget -s4 %u -o %o'" }
        - {regex: "'http::", line: "          'http::/usr/bin/aria2c -UWget -s4 %u -o %o'" }
        - {regex: "'https::", line: "          'https::/usr/bin/aria2c -UWget -s4 %u -o %o'" }

    - name: Update system
      pacman:
        update_cache: yes
        upgrade: yes
    
    - name: Install packages
      pacman:
        name:
          - base-devel
          - dash
          - git
          - man-db
          - man-pages
          - p7zip
          - pacman-contrib
          - pkgfile
          - python-pip
          - reflector
          - rsync
          - wget
        state: present

      # TODO: include conditional software
    - name: Install machine specific packages
      pacman:
        name: "{{ software }}"
        state: present

    - name: Synchronize pkgfile database
      systemd:
        name: pkgfile-update
        state: started

    - name: Configure reflector
      lineinfile:
        path: /etc/xdg/reflector/reflector.conf
        regexp: "{{ item.regex }}"
        line: "{{ item.line }}"
      loop:
        - {regex: "^#*\\s*--country", line: "{{ '--country ' + country|lower + ',' }}" }
        - {regex: "^#*\\s*--protocol", line: "--protocol https" }
        - {regex: "^#*\\s*--sort", line: "--sort rate" }

- name: Configure Dash
  become: yes
  block:
    - name: Relink /bin/sh to dash
      file:
        src: "dash"
        path: "/usr/bin/sh"
        state: link
        force: yes

    - name: Create pacman hook for persistant relinking of /bin/sh to dash
      blockinfile: 
        path: /etc/pacman.d/hooks/dash.hook
        create: true
        block: |
          [Trigger]
          Type = Package
          Operation = Install
          Operation = Upgrade
          Target = bash

          [Action]
          Description = Re-pointing /bin/sh symlink to dash...
          When = PostTransaction
          Exec = /usr/bin/ln -sfT dash /usr/bin/sh
          Depends = dash

- name: Systemd configuration
  become: yes
  block:
    #    - name: Link pacman-aria2dl script, service and timer
    #      file:
    #        src: "{{ ansible_env.HOME }}/.local/bin/pacman-aria2dl"
    #        path: "/usr/local/bin/pacman-aria2dl"
    #        state: link

    - name: Create Xfer pacman-aria2dl script
      blockinfile: 
        path: "/usr/local/bin/pacman-aria2dl"
        create: true
        block: |
          #!/bin/sh
          TMPFILE=$(mktemp)
          trap '/usr/bin/rm -f "$TMPFILE"' EXIT
          
          packages=$(/usr/bin/checkupdates | /usr/bin/cut -d' ' -f1); [ -z "${packages}" ] && exit 0
          queue=$(/usr/bin/pacman -Sp ${packages} | /usr/bin/grep -v "file:///"); [ -z "${queue}" ] && exit 0
          
          printf '%s\n' "${queue}" > "${TMPFILE}"
          /usr/bin/aria2c --input-file="${TMPFILE}" --no-conf --dir=/var/cache/pacman/pkg --max-concurrent-downloads=10 --continue=true --quiet=true --allow-overwrite=true


    - name: Create pacman-aria2dl systemd service
      blockinfile: 
        path: /etc/systemd/system/pacman-aria2dl.service
        create: true
        block: |
          [Unit]
          Description=Downloads tarballs of updated versions of packages
          Wants=pacman-aria2dl.timer

          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/pacman-aria2dl

          [Install]
          WantedBy=multi-user.target

    - name: Create pacman-aria2dl systemd timer
      blockinfile: 
        path: /etc/systemd/system/pacman-aria2dl.timer
        create: true
        block: |
          [Unit]
          Description=Downloads tarballs of updated versions of packages
          Requires=pacman-aria2dl.service

          [Timer]
          Unit=pacman-aria2dl.service
          OnCalendar=*:0/30
          OnBootSec=30

          [Install]
          WantedBy=timers.target
        
    - name: Enable service timer units
      systemd:
        daemon_reload: yes
        name: "{{ item }}"
        enabled: yes
      loop:
        - reflector.timer
        - pkgfile-update.timer
        - pacman-aria2dl.timer

- name: Audio configuration
  become: yes
  block:
    - name: Install audio related packages
      pacman:
        name: 
          - pipewire
          - lib32-pipewire
          - wireplumber
          - pipewire-alsa
          - pipewire-pulse
          - pipewire-jack
          - lib32-pipewire-jack
        state: present
  when: audio

- name: Bluetooth configuration
  become: yes
  block:
    - name: Install bluetooth related packages
      pacman:
        name: 
          - bluez
          - bluez-utils
          - blueman
          - bluez-hid2hci
        state: present
    
    - name: Enable btusb module
      modprobe:
        name: btusb
        state: present
    
    - name: Enable bluetooth daemon
      systemd:
        name: bluetooth
        state: started
        enabled: yes

    - name: Auto power-on bluetooth on boot
      lineinfile:
        path: /etc/locale.conf
        regexp: AutoEnable=
        line: AutoEnable=true
  when: audio or bluetooth

- name: AUR configuration
  block:
    - name: Clone AUR helper PKGBUILD
      git:
        repo: "https://aur.archlinux.org/{{ aur_helper }}.git"
        dest: "/tmp/{{ aur_helper }}"

    - name: Build AUR helper package
      command:
        cmd: makepkg -sric --noconfirm
        chdir: "/tmp/{{ aur_helper }}"
  when: aur

- name: Home workspace setup
  block:
    - name: Create workspace directories
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ ansible_env.HOME }}/.cache"
        - "{{ ansible_env.HOME }}/.config"
        - "{{ ansible_env.HOME }}/.local"
        - "{{ ansible_env.HOME }}/ctf"
        - "{{ ansible_env.HOME }}/downloads"
        - "{{ ansible_env.HOME }}/fieldwork"
        - "{{ ansible_env.HOME }}/music"
        - "{{ ansible_env.HOME }}/pictures"
        - "{{ ansible_env.HOME }}/repos"
        - "{{ ansible_env.HOME }}/tmp"
        - "{{ ansible_env.HOME }}/videos"

    - name: Clone dotfiles repository
      git:
        repo: https://github.com/baj0k/dotfiles.git
        dest: /tmp/dotfiles
        separate_git_dir: "{{ ansible_env.HOME }}/.local/dotfiles"

    - name: Deploy dotfiles
      command: /bin/sh /tmp/dotfiles/setup.sh
        #shell: "curl -L https://raw.githubusercontent.com/baj0k/dotfiles/main/setup.sh | sh"

        #    - name: Deploy dotfiles
        #      copy:
        #        src: /tmp/dotfiles/
        #        dest: "{{ ansible_env.HOME }}"
        #        remote_src: yes 

- name: Migrate data from ansible controller
  copy:
    src: "{{ item }}"
    dest: "{{ item }}"
  loop:
    # $HOME
    - ~/ctf/
    - ~/downloads/
    - ~/fieldwork/
    - ~/music/
    - ~/pictures/
    - ~/repos/
    - ~/tmp/
    - ~/videos/
    # $HOME/.config
    - ~/.config/git/identity
  when: migrate

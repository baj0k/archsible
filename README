archsible - ansible playbooks designed to ease and automate Arch Linux environment maintenance across multiple machines

Playbooks in this repository are designed to ease the installation, configuration and hardening of the fresh arch Linux OS

# Available playbooks:
- Minimal installation with full disk encryption
- Post installation configuration and hardening
- Setting up my dotfiles

# Prerequisites
- UEFI support enabled
- Secure Boot disabled
- Run ansible-galaxy collection install -r requirements.yml in order to install required additional modules

# Usage
- Modify hosts file according to your needs
- Change default values of the variables inside the playbook files

Boot the installation medium and execute following commands on the live system:
$ passwd
$ systemctl start sshd

Run the install.yml playbook with:
$ ansible-playbook install.yml -i hosts --ask-pass


# Full disk encryption
This setup utilizes the LVM on LUKS scenario using a single physical disk with two partitions.
The EFI partition is unencrypted and stores the bootloader binary (GRUB) which asks for a passphrase before being executed. 
The LUKS partition stores an encrypted LUKS container which is decrypted automatically with the key embedded in the initramfs loaded by the bootloader.

How it works:
After the machine is powered on, the bootloader (GRUB) asks for a passphrase to be unlocked and executed.
Bootloader takes the kernel image and the initramfs which are used to bring up the rest of the system. In the initramfs, the path to the unencrypted key is stored which allows automatic decryption of the LUKS container during boot.

Security considerations:
- With an encrypted boot partition, there is no option to modify user's kernel image or initramfs, but it would be still vulnerable to Evil Maid attacks.
- User is required to enter their password only once during the boot process.
- Randomness and length of the key makes it resistant to brute force and dictionary attacks.
- If the plain text key is kept with tight permissions (000 root:root) the only possibility for the attacker to obtain the decryption key is to gain root privileges on the running system at which point the system has already been fully compromised.
- GRUB doesn't yet support some of the LUKS 2 format features so the setup utilizes LUKS 1
